<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-02-11T15:37:47.240Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>小羽</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>json 模块</title>
    <link href="http://yoursite.com/2020/02/11/json%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/11/json%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-11T15:33:59.104Z</published>
    <updated>2020-02-11T15:37:47.240Z</updated>
    
    <content type="html"><![CDATA[<p>title: ‘’’json 模块’’’<br>date: 2020-02-04 22:35:32<br>tags: [python]</p><p>JSON(JavaScript Object Notation) 是一种轻量级的通用数据交换格式，起源于JavaScript，现在其他语言都能读写，可跨平台，用于数据存储，易于阅读，形式类似python的字典。</p><p>json模块和pickle模块包括的方法相同，功能类似。<strong>json和pickle主要不同</strong>在于：json是序列化的通用格式，其他编程语言都可以读写，人类可读，但是pickle对象仅限于python使用，因为其序列化结果是乱码，不可读。</p><p><em>注意：</em>json内的规定字符集是UTF-8，存储的字符串和键必须使用””双引号。</p><p>python数据类型和json类型转化对照如下表：</p><table><thead><tr><th>Python</th><th>json</th></tr></thead><tbody><tr><td>dict</td><td>object</td></tr><tr><td>list，tuple</td><td>array</td></tr><tr><td>str</td><td>string</td></tr><tr><td>int，long，float</td><td>number</td></tr><tr><td>True，False，None</td><td>true，false，null</td></tr></tbody></table><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>常用函数包括如下四个，其中，dump和load表示和文件进行数据交互；dumps和loads表示和程序中的变量进行数据交互。</p><h5 id="序列化（编码）"><a href="#序列化（编码）" class="headerlink" title="序列化（编码）"></a>序列化（编码）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dump(object, file)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.dumps(object) -&gt; string</span><br></pre></td></tr></table></figure><p>dump和dump其他输入参数相似，如下：<br>skipkeys：默认为False。若为True，则将跳过不是基本类型（str，int，float，bool，None）的dict键。<br>ensure_ascii：默认为True，将所有传入的非ASCII字符转义输出，否则以原字符输出。<br>check_circular：默认为True。若为False，则将跳过对容器类型的循环引用检查。<br>allow_nan：默认为True。若为False，序列化超出范围的浮点值（nan，inf，-inf）会引发ValueError。若为True，则将使用它们的JavaScript等效项（NaN，Infinity，-Infinity）。<br>indent：设置缩进格式，默认为None。若intent≤0或为“”，则插入换行符；indent&gt;0缩进多个空格；indent是字符串，则该字符串用于缩进。<br>separators： 默认为None，表示默认分隔符:（’，’，’：’）。输入类型是tuple，比如（‘, ’,‘:’）<br>sort_keys：默认为False，若为True则字典的输出将按键值排序。</p><h5 id="反序列化（解码）"><a href="#反序列化（解码）" class="headerlink" title="反序列化（解码）"></a>反序列化（解码）</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.load(file) -&gt; object</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">json.loads(string) -&gt; object</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a=&#123;<span class="string">'aa'</span>:<span class="number">123</span>,<span class="string">'bb'</span>:<span class="number">456</span>,<span class="string">'cc'</span>:<span class="number">789</span>&#125; </span><br><span class="line"><span class="comment">#创建d.json文件，将a写入</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/python workspace/d.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f: </span><br><span class="line">    json.dump(a, f)</span><br></pre></td></tr></table></figure><h5 id="dumps"><a href="#dumps" class="headerlink" title="dumps"></a>dumps</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">a=&#123;<span class="string">'你好'</span>:<span class="number">1</span>,<span class="string">'ss'</span>:<span class="string">"abc"</span>,<span class="string">'//'</span>:<span class="number">5</span>&#125;</span><br><span class="line">f=json.dumps(a)<span class="comment">#写入对象不是文件，而是python变量f</span></span><br><span class="line">f</span><br><span class="line"><span class="comment">#输出：'&#123;"\\u4f60\\u597d": 1, "ss": "abc", "//": 5&#125;' 汉字变成了乱码</span></span><br><span class="line">f=json.dumps(a,ensure_ascii=<span class="literal">False</span>,indent=<span class="number">4</span>)<span class="comment">#使用原字符，添加缩进</span></span><br><span class="line">print(f)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">    "你好": 1,</span></span><br><span class="line"><span class="string">    "ss": "abc",</span></span><br><span class="line"><span class="string">    "//": 5</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment">#善用indent可以使输出的json看起来更整齐</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>dumps返回的是字符串类型，虽然使用print后，看起来像字典。</p><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="comment">#读取事先建立的d.json文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/python workspace/d.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    s=json.load(f) </span><br><span class="line">print(s)</span><br><span class="line"><span class="comment">#输出：&#123;'aa': 123, 'bb': 456, 'cc': 789&#125;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>读取对象文件可以不是*.json后缀，但是内部存储的数据格式一定是按照json格式编写的，以键值对的方式，最外层有{}，引号是双引号。</p><h5 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line">json.loads(f)</span><br><span class="line"><span class="comment">#输出为上文中的a：&#123;'你好': 1, 'ss': 'abc', '//': 5&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: ‘’’json 模块’’’&lt;br&gt;date: 2020-02-04 22:35:32&lt;br&gt;tags: [python]&lt;/p&gt;
&lt;p&gt;JSON(JavaScript Object Notation) 是一种轻量级的通用数据交换格式，起源于JavaScript
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>os 模块</title>
    <link href="http://yoursite.com/2020/02/11/os%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/11/os%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-11T06:53:20.870Z</published>
    <updated>2020-02-11T06:53:20.870Z</updated>
    
    <content type="html"><![CDATA[<p>os：operating system</p><p>包括系统和目录的操作函数，可以让python访问操作系统。</p><p>os模块包括子模块path，主要用于获取文件的属性。</p><p>因为os和os.path模块包含函数及属性较多，本文仅列举部分，直接通过举例介绍函数功能。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>下文分为查找、创建、删除、修改和os.path五个部分，分别包括不同类型功能的函数。</p><h5 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h5><p>包括对系统、目录或文件的查找操作和属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#获得当前工作路径</span></span><br><span class="line"><span class="comment">#例如：'/root/python workspace'</span></span><br><span class="line"><span class="comment">#笔者使用Linux系统</span></span><br><span class="line">os.getcwdb()</span><br><span class="line"><span class="comment">#返回当前工作路径的Unicode对象</span></span><br><span class="line"><span class="string">b'/root/python workspace'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.name</span><br><span class="line"><span class="comment">#返回操作系统，若是Windows，则输出'nt'；若是Linux，则输出'posix'</span></span><br><span class="line"><span class="comment">#注意这不算是函数，是属性，因此结尾没有括号</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.sep</span><br><span class="line"><span class="comment">#Windows系统输出：'\\'；Linux系统输出：'/'</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.listdir(<span class="string">'/root/python workspace'</span>)</span><br><span class="line"><span class="comment">#输出：['Untitled1.ipynb','.ipynb_checkpoints',</span></span><br><span class="line"><span class="comment">#'tmp.pk','Untitled.ipynb']</span></span><br><span class="line"><span class="comment">#返回列表，包括输入路径内的文件、文件夹的名字。</span></span><br></pre></td></tr></table></figure><h5 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.mkdir(<span class="string">'/root/python workspace/test'</span>)</span><br><span class="line"><span class="comment">#在目录 /root/python workspace 下创建一个名为test的文件夹</span></span><br></pre></td></tr></table></figure><p><em>注意：若创建、删除等操作是在当前工作路径下，则输入可以直接输入文件或文件夹名称，不必包括路径。如上文可以直接输入’test‘。</em></p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rmdir(<span class="string">'test'</span>)</span><br><span class="line"><span class="comment">#删除当前工作目录下名为test的空文件夹</span></span><br><span class="line"><span class="comment">#注意：删除对象必须是空的文件夹</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.remove(<span class="string">'/root/new/tmp.pk'</span>)</span><br><span class="line"><span class="comment">#删除路径为'/root/new/’下的tmp.pk文件</span></span><br><span class="line"><span class="comment">#注意：删除对象必须是一个存在的文件</span></span><br></pre></td></tr></table></figure><h5 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'test'</span>,<span class="string">'test1'</span>)</span><br><span class="line"><span class="comment">#将当前路径下名为test的文件或文件夹改名为test1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chdir(<span class="string">'/root'</span>)</span><br><span class="line"><span class="comment">#修改当前工作路径</span></span><br><span class="line">os.getcwd()</span><br><span class="line"><span class="comment">#输出：'/root'</span></span><br></pre></td></tr></table></figure><h4 id="os-path"><a href="#os-path" class="headerlink" title="os.path"></a>os.path</h4><p>os.path模块可以获取文件属性信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file=<span class="string">'/root/python workspace/test'</span></span><br></pre></td></tr></table></figure><p>因为该模块函数较多，因此列表展示其部分功能。举例输入文件如上，file包括一个文件夹的路径，输出见下表第三列。</p><table><thead><tr><th>方法</th><th>说明</th><th>输出举例</th></tr></thead><tbody><tr><td>os.path.abspath(file)</td><td>返回绝对路径</td><td>‘/root/python workspace/test’</td></tr><tr><td>os.path.basename(file)</td><td>返回文件名</td><td>‘test’</td></tr><tr><td>os.path.dirname(file)</td><td>返回文件路径</td><td>‘/root/python workspace’</td></tr><tr><td>os.path.exists(file)</td><td>判断是否存在该路径</td><td>True</td></tr><tr><td>os.path.getatime(file)</td><td>返回最近访问时间(秒)</td><td>1581350083.6365876</td></tr><tr><td>s.path.getctime(file)</td><td>返回文件创建时间</td><td>1581350083.6365876</td></tr><tr><td>os.path.getmtime(file)</td><td>返回最近文件修改时间</td><td>1581350083.6365876</td></tr><tr><td>os.path.getsize(file)</td><td>返回文件大小（字节）</td><td>4096</td></tr><tr><td>os.path.isabs(file)</td><td>判断是否为绝对路径</td><td>True</td></tr><tr><td>os.path.isfile(file)</td><td>判断路径是否为文件</td><td>False</td></tr><tr><td>os.path.isdir(file)</td><td>判断路径是否为目录</td><td>True</td></tr><tr><td>os.path.islink(file)</td><td>判断路径是否为链接</td><td>False</td></tr><tr><td>os.path.normcase(file)</td><td>转换输入路径的大小写和斜杠</td><td>‘/root/python workspace/test’</td></tr><tr><td>os.path.normpath(file)</td><td>规范输入字符串形式</td><td>‘/root/python workspace/test’</td></tr><tr><td>os.path.split(file)</td><td>把路径分割成目录和文件名</td><td>(‘/root/python workspace’, ‘test’)</td></tr></tbody></table><p>除了上述方法外，os.path还包括连接文件名、判断是否相同文件及目录等方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;os：operating system&lt;/p&gt;
&lt;p&gt;包括系统和目录的操作函数，可以让python访问操作系统。&lt;/p&gt;
&lt;p&gt;os模块包括子模块path，主要用于获取文件的属性。&lt;/p&gt;
&lt;p&gt;因为os和os.path模块包含函数及属性较多，本文仅列举部分，直接通过举例介
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>glob 模块</title>
    <link href="http://yoursite.com/2020/02/09/glob%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/09/glob%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-09T15:40:35.947Z</published>
    <updated>2020-02-09T15:40:35.947Z</updated>
    
    <content type="html"><![CDATA[<p>目录文件名查找模块。在查找路径中使用通配符，可以找到满足指定条件的所有文件路径名。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>该模块包括3个函数，glob用于一次性返回指定路径匹配的文件名；iglob和glob功能一样，同样查找匹配的文件名，但是返回对象是迭代器，即每次输出一个；escape在路径中选出*、？、[ 符号。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glob.glob(pathname, *, recursive=False)   -&gt;   list</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glob.iglob(pathname, *, recursive=False)  -&gt;   iterator object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">glob.escape(pathname)</span><br></pre></td></tr></table></figure><p>输入路径名支持通配符：</p><table><thead><tr><th>符号</th><th>含义</th></tr></thead><tbody><tr><td>*</td><td>匹配0到多个字符</td></tr><tr><td>？</td><td>匹配1个字符</td></tr><tr><td>[a-z],[0-9]等</td><td>表示范围，匹配1个字符</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="glob"><a href="#glob" class="headerlink" title="glob"></a>glob</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">glob.glob(<span class="string">'/root/data/test1/65*.csv'</span>)</span><br><span class="line"><span class="comment">#输出‘/root/data/test1/’目录下所有65开头的csv文件</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">['/root/data/test1/65bbf6d7a405afa6348d.csv',</span></span><br><span class="line"><span class="string"> '/root/data/test1/659a34281cc2fe85020e.csv',</span></span><br><span class="line"><span class="string"> '/root/data/test1/65bc1c8c4975caff0964.csv',</span></span><br><span class="line"><span class="string"> '/root/data/test1/65657f592decf6d14040.csv',</span></span><br><span class="line"><span class="string"> '/root/data/test1/65f046177650d25f7b42.csv']</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">glob.glob(<span class="string">'/root/*/[0-9].*'</span>)</span><br><span class="line"><span class="comment">#返回列表包括root的所有子目录中所有以一个数字命名的各种类型文件</span></span><br></pre></td></tr></table></figure><p>上文目录都是Linux系统下，Windows下目录格式不同，为了防转义，可以在字符串前加”r”<br>比如：r’C:\Users\USER\OneDrive\桌面*.txt’  或  ‘C:\Users\USER\OneDrive\桌面\*.txt’</p><h5 id="iglob"><a href="#iglob" class="headerlink" title="iglob"></a>iglob</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">a=glob.iglob(<span class="string">'/root/data/test1/65*.csv'</span>) </span><br><span class="line"><span class="comment">#&lt;generator object _iglob at 0x7f01d5820d00&gt;</span></span><br><span class="line">next(a)</span><br><span class="line"><span class="comment">#输出：'/root/data/test1/65bbf6d7a405afa6348d.csv'</span></span><br><span class="line">next(a)</span><br><span class="line"><span class="comment">#输出：'/root/data/test1/659a34281cc2fe85020e.csv'</span></span><br></pre></td></tr></table></figure><h5 id="escape"><a href="#escape" class="headerlink" title="escape"></a>escape</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> glob</span><br><span class="line">glob.escape(<span class="string">'C:\\Users\\USER\\One?riv[a-f]\\桌面\\*.pdf'</span>)</span><br><span class="line"><span class="comment">#输出：'C:\\Users\\USER\\One[?]riv[[]a-f]\\桌面\\[*].pdf'</span></span><br><span class="line"><span class="comment">#？*[三个符号会被[]所包括</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;目录文件名查找模块。在查找路径中使用通配符，可以找到满足指定条件的所有文件路径名。&lt;/p&gt;
&lt;h4 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h4&gt;&lt;p&gt;该模块包括3个函数，glo
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>random 模块</title>
    <link href="http://yoursite.com/2020/02/08/random%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/08/random%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-08T15:39:02.745Z</published>
    <updated>2020-02-08T15:39:02.745Z</updated>
    
    <content type="html"><![CDATA[<p>title: ‘’’random 模块’’’<br>date: 2020-02-08 13:07:32<br>tags: python</p><p>包括生成随机对象的函数。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>部分函数具体介绍和示例见下文。randint返回随机整数；uniform和random返回随机浮点数；choice、sample和randrange从原序列中随机选择元素并返回；shuffle打乱原输入列表的顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randint(a,b)</span><br><span class="line"><span class="comment">#随机返回[a,b]间的一个数，包括a和b</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.randrange(start, stop=<span class="literal">None</span>, step=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#随机返回range生成的序列中的一个</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.choice(seq)</span><br><span class="line"><span class="comment">#随机选择非空序列中的一个元素</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.sample(population, k)</span><br><span class="line"><span class="comment">#从序列或集合population中随机返回k个元素</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.shuffle(x, random=<span class="literal">None</span>)</span><br><span class="line"><span class="comment">#将列表x随机打乱顺序，返回random(默认为None)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.random()</span><br><span class="line"><span class="comment">#随机返回[0,1)间的一个浮点数,不包括1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">random.uniform(a,b)</span><br><span class="line"><span class="comment">#随机返回[a,b]间的一个浮点数</span></span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="randint"><a href="#randint" class="headerlink" title="randint"></a>randint</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randint(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment">#输出1~10间任意数，包括1和10</span></span><br></pre></td></tr></table></figure><h5 id="randrange"><a href="#randrange" class="headerlink" title="randrange"></a>randrange</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.randrange(<span class="number">1</span>,<span class="number">10</span>)</span><br><span class="line"><span class="comment">#在[1,10)中随机返回1个数</span></span><br><span class="line">random.randrange(<span class="number">5</span>)</span><br><span class="line"><span class="comment">#在[0,5)中随机返回1个数（若不指定初值，则从0开始）</span></span><br><span class="line">random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#在[1,3,5,7,9]中随机返回1个数(因为步长为2)</span></span><br></pre></td></tr></table></figure><h5 id="choice"><a href="#choice" class="headerlink" title="choice"></a>choice</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.choice(<span class="string">'asdf'</span>)</span><br><span class="line">random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line"><span class="comment">#以上都随机输出序列中的一个元素</span></span><br><span class="line"><span class="comment">#输入不能是set类型</span></span><br></pre></td></tr></table></figure><h5 id="sample"><a href="#sample" class="headerlink" title="sample"></a>sample</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.sample(<span class="string">'abcd'</span>,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#输出：['a','c']</span></span><br><span class="line">random.sample([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">3</span>)</span><br><span class="line"><span class="comment">#输出：[3,1,5]</span></span><br><span class="line"><span class="comment">#以上均随机返回指定数量元素的列表</span></span><br></pre></td></tr></table></figure><h5 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle"></a>shuffle</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">random.shuffle(a)</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#输出：[3, 6, 5, 1, 2, 4]   随机打乱输入对象</span></span><br><span class="line"><span class="comment">#输入是list类型，不能是str、set类型等</span></span><br></pre></td></tr></table></figure><h5 id="random"><a href="#random" class="headerlink" title="random"></a>random</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">random.random()</span><br><span class="line"><span class="comment">#注意此处random是函数名，不能直接random()</span></span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: ‘’’random 模块’’’&lt;br&gt;date: 2020-02-08 13:07:32&lt;br&gt;tags: python&lt;/p&gt;
&lt;p&gt;包括生成随机对象的函数。&lt;/p&gt;
&lt;h4 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerli
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>itertools 模块</title>
    <link href="http://yoursite.com/2020/02/07/itertools%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/07/itertools%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-07T15:17:55.960Z</published>
    <updated>2020-02-08T15:40:07.173Z</updated>
    
    <content type="html"><![CDATA[<p>title: ‘’’itertools 模块’’’<br>date: 2020-02-06 22:35:32<br>tags: python</p><p>包括创建和使用迭代器的函数。</p><p>迭代器是可以记录遍历位置。迭代器对象从集合的第一个元素开始访问，直到所有的元素被访问完结束。迭代器只能往前不会后退。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>itertools模块包括较多关于迭代器创建、合并、切分等操作的函数，这里介绍如下几个。</p><p>permutations生成一个迭代对象的全排列； chain连接多个列表或者迭代器；cycle对输入对象生成循环迭代对象；count基于给定初值和步长，进行无限迭代；islice指定起、终点、步长的迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itertools.permutations(iterable,r=None) --&gt; permutations object</span><br><span class="line"><span class="comment">#r表示迭代器中元素的长度</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itertools.chain(*iterables) --&gt; chain object</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itertools.cycle(iterable) --&gt; cycle object</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">itertools.count(start=0,step=1) --&gt; count object</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">itertools.islice(iterable,start,stop,step=1) --&gt; islice object</span><br><span class="line"><span class="comment">#类似切片操作，但是输出为迭代器对象。</span></span><br></pre></td></tr></table></figure><p>注意：对于迭代对象的输出，有限迭代对象可以转化为list，直接一次性输出。或者利用循环遍历结果等方法。内置函数next()可以用来输出迭代对象。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="permutations"><a href="#permutations" class="headerlink" title="permutations"></a>permutations</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">data=itertools.permutations(<span class="string">'abc'</span>)</span><br><span class="line">list(data)</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('a', 'b', 'c'),</span></span><br><span class="line"><span class="string"> ('a', 'c', 'b'),</span></span><br><span class="line"><span class="string"> ('b', 'a', 'c'),</span></span><br><span class="line"><span class="string"> ('b', 'c', 'a'),</span></span><br><span class="line"><span class="string"> ('c', 'a', 'b'),</span></span><br><span class="line"><span class="string"> ('c', 'b', 'a')]</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line">data=itertools.permutations(<span class="string">'001'</span>)</span><br><span class="line">list(data)</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">[('0', '0', '1'),</span></span><br><span class="line"><span class="string"> ('0', '1', '0'),</span></span><br><span class="line"><span class="string"> ('0', '0', '1'),</span></span><br><span class="line"><span class="string"> ('0', '1', '0'),</span></span><br><span class="line"><span class="string"> ('1', '0', '0'),</span></span><br><span class="line"><span class="string"> ('1', '0', '0')]</span></span><br><span class="line"><span class="string"> """</span></span><br><span class="line"><span class="comment">#permutations输出的是输入对象的全排列，因此对于重复元素会出现重复结果，如('0', '0', '1')。</span></span><br></pre></td></tr></table></figure><h5 id="chain"><a href="#chain" class="headerlink" title="chain"></a>chain</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">itertools.chain(range(<span class="number">5</span>),range(<span class="number">100</span>,<span class="number">105</span>))</span><br><span class="line"><span class="comment">#输出为迭代器对象：&lt;itertools.chain at 0x7f01d56d1cc0&gt;</span></span><br><span class="line">list(itertools.chain(range(<span class="number">5</span>),range(<span class="number">100</span>,<span class="number">105</span>)))</span><br><span class="line"><span class="comment">#输出：[0, 1, 2, 3, 4, 100, 101, 102, 103, 104]</span></span><br><span class="line">list(itertools.chain(range(<span class="number">3</span>),[<span class="string">'s'</span>,<span class="string">'a'</span>],<span class="string">'124'</span>))</span><br><span class="line"><span class="comment">#输出：[0, 1, 2, 's', 'a', '1', '2', '4']</span></span><br></pre></td></tr></table></figure><h5 id="cycle"><a href="#cycle" class="headerlink" title="cycle"></a>cycle</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> itertools.cycle(<span class="string">'abc'</span>):</span><br><span class="line">    res.append(i)</span><br><span class="line">    <span class="comment">#因为迭代对象无限循环，因此指定输出长度break</span></span><br><span class="line">    <span class="keyword">if</span> len(res)==<span class="number">7</span>:<span class="keyword">break</span></span><br><span class="line">print(res)</span><br><span class="line"><span class="comment">#输出：['a', 'b', 'c', 'a', 'b', 'c', 'a']</span></span><br></pre></td></tr></table></figure><h5 id="count"><a href="#count" class="headerlink" title="count"></a>count</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">data=itertools.count(<span class="number">10</span>,<span class="number">2</span>)<span class="comment">#初值为10，步长为2</span></span><br><span class="line"><span class="comment">#使用循环遍历迭代结果，因为是无限迭代，所以设定大于20则退出</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> i&gt;<span class="number">20</span>:<span class="keyword">break</span></span><br><span class="line">    print(i)</span><br><span class="line"><span class="comment">#输出：10  12  14  16  18  20</span></span><br></pre></td></tr></table></figure><h5 id="islice"><a href="#islice" class="headerlink" title="islice"></a>islice</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line">list(itertools.islice(<span class="string">'abcdefg'</span>,<span class="number">2</span>,<span class="number">5</span>))<span class="comment">#起始索引2，终止索引5，默认步长1</span></span><br><span class="line"><span class="comment">#输出：['c', 'd', 'e']</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: ‘’’itertools 模块’’’&lt;br&gt;date: 2020-02-06 22:35:32&lt;br&gt;tags: python&lt;/p&gt;
&lt;p&gt;包括创建和使用迭代器的函数。&lt;/p&gt;
&lt;p&gt;迭代器是可以记录遍历位置。迭代器对象从集合的第一个元素开始访问，直到所有的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>&#39;calendar 模块&#39;</title>
    <link href="http://yoursite.com/2020/02/06/calendar%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/06/calendar%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-06T12:31:52.000Z</published>
    <updated>2020-02-11T04:58:49.041Z</updated>
    
    <content type="html"><![CDATA[<p>包括日历、日期相关函数。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>calendar模块有较多函数，此处仅列举常用函数。calendar返回指定年的日历字符串；month返回指定年月的日历；weekday返回指定日期是星期几；isleap判断指定年是不是闰年；leapdays返回指定年限内闰年的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">calendar.calendar(year,w=2,l=1,c=6,m=3) -&gt; string (multi-line)</span><br><span class="line"><span class="comment">#w表示日之间的间隔宽度，默认间隔2；</span></span><br><span class="line"><span class="comment">#l表示行间隔，默认为1行；</span></span><br><span class="line"><span class="comment">#c表示月之间的间隔宽度，默认为6；</span></span><br><span class="line"><span class="comment">#m表示并列显示的月份数量，默认3个月并排显示</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calendar.month(year,month,w=0,l=0) -&gt; string (multi-line)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">calendar.weekday(year, month, day)  -&gt; int</span><br><span class="line"><span class="comment">#注意：默认0表示星期一；0~6：星期一~星期日。</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calendar.isleap(year) -&gt; bool</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：闰年包括两种：①公历年份是4的倍数的，且不是100的倍数，比如2020,2004；②公历年份是400的倍数，比如2000。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">calendar.leapdays(y1, y2) -&gt; int</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">print(calendar.calendar(<span class="number">2020</span>))</span><br><span class="line"><span class="comment">#结果返回多行字符串，因此需要打印，直接输出可能格式错乱且包括换行符\n.</span></span><br></pre></td></tr></table></figure><h5 id="month"><a href="#month" class="headerlink" title="month"></a>month</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">print(calendar.month(<span class="number">2020</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#输出：</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">     March 2020</span></span><br><span class="line"><span class="string">Mo Tu We Th Fr Sa Su</span></span><br><span class="line"><span class="string">                   1</span></span><br><span class="line"><span class="string"> 2  3  4  5  6  7  8</span></span><br><span class="line"><span class="string"> 9 10 11 12 13 14 15</span></span><br><span class="line"><span class="string">16 17 18 19 20 21 22</span></span><br><span class="line"><span class="string">23 24 25 26 27 28 29</span></span><br><span class="line"><span class="string">30 31</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure><h5 id="weekday"><a href="#weekday" class="headerlink" title="weekday"></a>weekday</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">print(calendar.weekday(<span class="number">2020</span>,<span class="number">3</span>,<span class="number">5</span>))</span><br><span class="line"><span class="comment">#输出：3  表示星期四</span></span><br></pre></td></tr></table></figure><h5 id="isleap"><a href="#isleap" class="headerlink" title="isleap"></a>isleap</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">print(calendar.isleap(<span class="number">2020</span>))</span><br><span class="line"><span class="comment">#输出：True</span></span><br></pre></td></tr></table></figure><h5 id="leapdays"><a href="#leapdays" class="headerlink" title="leapdays"></a>leapdays</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> calendar</span><br><span class="line">print(calendar.leapdays(<span class="number">1900</span>,<span class="number">2020</span>))</span><br><span class="line"><span class="comment">#输出：29  表示[1900,2020)间有29个闰年</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;包括日历、日期相关函数。&lt;/p&gt;
&lt;h4 id=&quot;常用函数&quot;&gt;&lt;a href=&quot;#常用函数&quot; class=&quot;headerlink&quot; title=&quot;常用函数&quot;&gt;&lt;/a&gt;常用函数&lt;/h4&gt;&lt;p&gt;calendar模块有较多函数，此处仅列举常用函数。calendar返回指定年的日历
      
    
    </summary>
    
    
      <category term="python模块" scheme="http://yoursite.com/categories/python%E6%A8%A1%E5%9D%97/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>struct 模块</title>
    <link href="http://yoursite.com/2020/02/06/struct%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/06/struct%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-05T16:54:09.179Z</published>
    <updated>2020-02-08T15:40:35.304Z</updated>
    
    <content type="html"><![CDATA[<p>title: ‘’’struct 模块’’’<br>date: 2020-02-06 00:05:32<br>tags: python</p><p>在Python和C结构之间转换的函数，用于二进制数据存储和处理，处理c语言中的结构体。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>常用函数包括如下三个，pack将数据封装成字节流；unpack根据给定格式解析字节，返回tuple类型； calcsize返回给定的格式占用内存的字节数。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct.pack(fmt, v1, v2, ...) -&gt; bytes</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct.unpack(fmt, buffer) -&gt; (v1, v2, ...)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">struct.calcsize(fmt) -&gt; int</span><br></pre></td></tr></table></figure><h4 id="格式符（fmt）"><a href="#格式符（fmt）" class="headerlink" title="格式符（fmt）"></a>格式符（fmt）</h4><p>格式符用来表示字节封装或解析的格式，注意：</p><p>1.每个格式符前可以有一个数字，表示个数，比如4s表示长度为4的字符串，2i表示两个整数；</p><p>2.q和Q只在机器支持64位操作时有意义；</p><p>3.P用来转换一个指针,其长度和计算机相关;</p><p>4.f和d的长度和计算机相关。</p><table><thead><tr><th align="center">格式符</th><th align="center">C语言类型</th><th align="center">Python类型</th><th align="center">内存大小</th></tr></thead><tbody><tr><td align="center">x</td><td align="center">填充字节</td><td align="center">无</td><td align="center">1</td></tr><tr><td align="center">c</td><td align="center">char</td><td align="center">string(长度为1)</td><td align="center">1</td></tr><tr><td align="center">b</td><td align="center">signed char</td><td align="center">int</td><td align="center">1</td></tr><tr><td align="center">B</td><td align="center">unsigned char</td><td align="center">int</td><td align="center">1</td></tr><tr><td align="center">h</td><td align="center">short</td><td align="center">int</td><td align="center">2</td></tr><tr><td align="center">H</td><td align="center">unsigned short</td><td align="center">int</td><td align="center">2</td></tr><tr><td align="center">i</td><td align="center">int</td><td align="center">int</td><td align="center">4</td></tr><tr><td align="center">I</td><td align="center">unsigned int/long</td><td align="center">int/long</td><td align="center">4</td></tr><tr><td align="center">L</td><td align="center">unsigned long</td><td align="center">long</td><td align="center">8</td></tr><tr><td align="center">q</td><td align="center">long long</td><td align="center">long</td><td align="center">8</td></tr><tr><td align="center">Q</td><td align="center">unsigned long long</td><td align="center">long</td><td align="center">8</td></tr><tr><td align="center">f</td><td align="center">float</td><td align="center">float</td><td align="center">4</td></tr><tr><td align="center">d</td><td align="center">double</td><td align="center">float</td><td align="center">8</td></tr><tr><td align="center">s</td><td align="center">char[]</td><td align="center">string</td><td align="center">1</td></tr><tr><td align="center">p</td><td align="center">char[]</td><td align="center">string</td><td align="center">1</td></tr><tr><td align="center">?</td><td align="center">_Bool</td><td align="center">bool</td><td align="center">1</td></tr></tbody></table><h4 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h4><table><thead><tr><th>字符</th><th>字节顺序</th><th>大小</th></tr></thead><tbody><tr><td>@（默认）</td><td>与本机一致</td><td>凑够4个字节</td></tr><tr><td>=</td><td>与本机一致</td><td>按原字节数</td></tr><tr><td>&lt;</td><td>小端</td><td>按原字节数</td></tr><tr><td>&gt;</td><td>大端</td><td>按原字节数</td></tr><tr><td>!</td><td>network（大端）</td><td>按原字节数</td></tr></tbody></table><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="pack"><a href="#pack" class="headerlink" title="pack"></a>pack</h5><p><em>注意：</em>python3所有字符串都是 unicode 字符串，若直接用pack封装会报如下错误：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#error: argument for 's' must be a bytes object</span></span><br></pre></td></tr></table></figure><p>因此字符串处理前需要使用’utf-8’编码，具体方法如下代码段。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">a=<span class="number">10</span></span><br><span class="line">b=<span class="string">'apple'</span></span><br><span class="line">c=<span class="number">35.9</span></span><br><span class="line">d=<span class="literal">True</span></span><br><span class="line">data=struct.pack(<span class="string">"i5sf?"</span>,a,b.encode(<span class="string">'utf-8'</span>),c,d)<span class="comment">#对字符串先编码</span></span><br><span class="line">print(data)</span><br><span class="line"><span class="comment">#输出：b'\n\x00\x00\x00apple\x00\x00\x00\x9a\x99\x0fB\x01'</span></span><br></pre></td></tr></table></figure><h5 id="unpack"><a href="#unpack" class="headerlink" title="unpack"></a>unpack</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">t=struct.unpack(<span class="string">"i5sf?"</span>,data)</span><br><span class="line"><span class="comment">#或者：t1,t2,t3,t4=struct.unpack("i5sf?",data)</span></span><br><span class="line">print(t)</span><br><span class="line"><span class="comment">#输出：(10, b'apple', 35.900001525878906, True)</span></span><br></pre></td></tr></table></figure><h5 id="calcsize"><a href="#calcsize" class="headerlink" title="calcsize"></a>calcsize</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line">struct.calcsize(<span class="string">'5s'</span>)</span><br><span class="line"><span class="comment">#输出：5</span></span><br><span class="line">struct.calcsize(<span class="string">'3if'</span>)</span><br><span class="line"><span class="comment">#输出：16</span></span><br><span class="line"><span class="comment">#16=3*4+4</span></span><br><span class="line">struct.calcsize(<span class="string">'i5sf?'</span>)</span><br><span class="line"><span class="comment">#输出：17</span></span><br><span class="line"><span class="comment">#17=4+5+3+4+1  </span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">注意：其中3表示填充，因为默认对齐方式为@</span></span><br><span class="line"><span class="string">字节字符串s可以以任何偏移量开头，因为其标准大小为1;</span></span><br><span class="line"><span class="string">i,f等只能以4的倍数的偏移量开头。例如0、4、8等;</span></span><br><span class="line"><span class="string">L,d等只能以8的倍数的偏移量开头。例如0、8、16等。</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line">struct.calcsize(<span class="string">'=i5sf?'</span>)</span><br><span class="line"><span class="comment">#输出：14</span></span><br><span class="line"><span class="comment">#14=4+5+4+1  按原字节数</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: ‘’’struct 模块’’’&lt;br&gt;date: 2020-02-06 00:05:32&lt;br&gt;tags: python&lt;/p&gt;
&lt;p&gt;在Python和C结构之间转换的函数，用于二进制数据存储和处理，处理c语言中的结构体。&lt;/p&gt;
&lt;h4 id=&quot;常用函数&quot;&gt;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pickle 模块</title>
    <link href="http://yoursite.com/2020/02/04/pickle%20%E6%A8%A1%E5%9D%97/"/>
    <id>http://yoursite.com/2020/02/04/pickle%20%E6%A8%A1%E5%9D%97/</id>
    <published>2020-02-04T15:42:00.059Z</published>
    <updated>2020-02-08T15:40:19.550Z</updated>
    
    <content type="html"><![CDATA[<p>title: ‘’’pickle 模块’’’<br>date: 2020-02-04 22:35:32<br>tags: python</p><p>创建Python数据对象的二进制序列化表示，用于存储python对象，可以存于文件或变量中。<br>使用pickle模块存储处理的对象可以是<strong>任何python数据类型、函数、类</strong>。</p><p>特点：pickle存储数据或对象，操作简单，可靠持久存储，但是数据转化后特定于python使用，无法直接阅读。</p><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><p>常用函数包括如下四个，其中，dump和load表示和文件进行数据交互，<strong>文件后缀为*.pk</strong>；dumps和loads表示和程序中的变量进行数据交互。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pickle.dump(object, file)</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pickle.dumps(object) -&gt; string</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pickle.load(file) -&gt; object</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pickle.loads(string) -&gt; object</span><br></pre></td></tr></table></figure><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><h5 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]  <span class="comment">#数据对象可以为任何类型</span></span><br><span class="line"><span class="comment">#打开a.pk文件，将a写入</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/python workspace/a.pk'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f: </span><br><span class="line">    pickle.dump(a, f)</span><br></pre></td></tr></table></figure><h5 id="dumps"><a href="#dumps" class="headerlink" title="dumps"></a>dumps</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">f=pickle.dumps(a)<span class="comment">#写入对象不是文件，而是python变量</span></span><br><span class="line"></span><br><span class="line">print(f)</span><br><span class="line"><span class="comment">#输出：b'\x80\x03]q\x00(K\x01K\x02K\x03K\x04K\x05e.'若要知道该串代码含义，需要通过load解码。</span></span><br></pre></td></tr></table></figure><h5 id="load"><a href="#load" class="headerlink" title="load"></a>load</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="comment">#读取事先建立的a.pk文件</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/root/python workspace/a.pk'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    a=pickle.load(f) </span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#输出：[1, 2, 3, 4, 5]'</span></span><br></pre></td></tr></table></figure><h5 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line">pickle.loads(f)</span><br><span class="line"><span class="comment">#输出为上文中的a：[1, 2, 3, 4, 5]'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;title: ‘’’pickle 模块’’’&lt;br&gt;date: 2020-02-04 22:35:32&lt;br&gt;tags: python&lt;/p&gt;
&lt;p&gt;创建Python数据对象的二进制序列化表示，用于存储python对象，可以存于文件或变量中。&lt;br&gt;使用pickle模块存储
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>&#39;hello world&#39;</title>
    <link href="http://yoursite.com/2020/02/04/hello-world/"/>
    <id>http://yoursite.com/2020/02/04/hello-world/</id>
    <published>2020-02-04T05:35:32.000Z</published>
    <updated>2020-02-08T15:44:01.701Z</updated>
    
    <content type="html"><![CDATA[<p>经过了几番折腾，终于拥有了自己的博客，虽然还有很多欠缺的地方，接下来就边写博客边补充吧。</p><p>在下在读研究生一枚，希望通过博客来整理和分享所学知识，努力坚持更新。部分内容可能不会是原创，若有侵权，请联系，我将删除。若发现文章中有错误，请指正，谢谢！</p><p>还有欢迎您的联系与交流，希望我们可以共同进步。知识，因分享而更加快乐。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;经过了几番折腾，终于拥有了自己的博客，虽然还有很多欠缺的地方，接下来就边写博客边补充吧。&lt;/p&gt;
&lt;p&gt;在下在读研究生一枚，希望通过博客来整理和分享所学知识，努力坚持更新。部分内容可能不会是原创，若有侵权，请联系，我将删除。若发现文章中有错误，请指正，谢谢！&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
